"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScreenOrientation = useScreenOrientation;

var _react = require("react");

var ScreenOrientation = _interopRequireWildcard(require("expo-screen-orientation"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Get or track the screen orientation of the device.
 * It returns one of the `Orientation` enums, which represents the current orientation.
 * For iOS, it also returns both the horizontal and vertical size classes.
 *
 * @see https://docs.expo.io/versions/latest/sdk/screen-orientation/
 * @example const [orientation, getOrientation] = useScreenOrientation(...);
 */
function useScreenOrientation(options = {}) {
  const [orientation, setOrientation] = (0, _react.useState)();
  const {
    get = true,
    listen = true
  } = options;
  const getOrientation = (0, _react.useCallback)(() => ScreenOrientation.getOrientationAsync().then(orientation => {
    setOrientation({
      orientation
    });
    return orientation;
  }), []);
  (0, _react.useEffect)(() => {
    if (get) {
      getOrientation();
    }

    if (listen) {
      const subscription = ScreenOrientation.addOrientationChangeListener(event => setOrientation(event.orientationInfo));
      return subscription.remove;
    }
  }, [get, listen, getOrientation]);
  return [orientation, getOrientation];
}
//# sourceMappingURL=use-screen-orientation.js.map