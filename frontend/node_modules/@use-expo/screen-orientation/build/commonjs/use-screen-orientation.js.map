{"version":3,"sources":["use-screen-orientation.ts"],"names":["useScreenOrientation","options","orientation","setOrientation","get","listen","getOrientation","ScreenOrientation","getOrientationAsync","then","subscription","addOrientationChangeListener","event","orientationInfo","remove"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;;;AAQO,SAASA,oBAAT,CACNC,OAAiC,GAAG,EAD9B,EAKL;AACD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC,sBAAtC;AACA,QAAM;AACLC,IAAAA,GAAG,GAAG,IADD;AAELC,IAAAA,MAAM,GAAG;AAFJ,MAGFJ,OAHJ;AAKA,QAAMK,cAAc,GAAG,wBAAY,MAClCC,iBAAiB,CAACC,mBAAlB,GAAwCC,IAAxC,CAA6CP,WAAW,IAAI;AAC3DC,IAAAA,cAAc,CAAC;AAAED,MAAAA;AAAF,KAAD,CAAd;AACA,WAAOA,WAAP;AACA,GAHD,CADsB,EAKpB,EALoB,CAAvB;AAOA,wBAAU,MAAM;AACf,QAAIE,GAAJ,EAAS;AACRE,MAAAA,cAAc;AACd;;AAED,QAAID,MAAJ,EAAY;AACX,YAAMK,YAAY,GAAGH,iBAAiB,CAACI,4BAAlB,CACpBC,KAAK,IAAIT,cAAc,CAACS,KAAK,CAACC,eAAP,CADH,CAArB;AAIA,aAAOH,YAAY,CAACI,MAApB;AACA;AACD,GAZD,EAYG,CAACV,GAAD,EAAMC,MAAN,EAAcC,cAAd,CAZH;AAcA,SAAO,CAACJ,WAAD,EAAcI,cAAd,CAAP;AACA","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport * as ScreenOrientation from 'expo-screen-orientation';\n\n/**\n * Get or track the screen orientation of the device.\n * It returns one of the `Orientation` enums, which represents the current orientation.\n * For iOS, it also returns both the horizontal and vertical size classes.\n *\n * @see https://docs.expo.io/versions/latest/sdk/screen-orientation/\n * @example const [orientation, getOrientation] = useScreenOrientation(...);\n */\nexport function useScreenOrientation(\n\toptions: ScreenOrientationOptions = {},\n): [\n\tScreenOrientation.ScreenOrientationInfo | undefined,\n\t() => Promise<ScreenOrientation.Orientation>,\n] {\n\tconst [orientation, setOrientation] = useState<ScreenOrientation.ScreenOrientationInfo>();\n\tconst {\n\t\tget = true,\n\t\tlisten = true,\n\t} = options;\n\n\tconst getOrientation = useCallback(() => (\n\t\tScreenOrientation.getOrientationAsync().then(orientation => {\n\t\t\tsetOrientation({ orientation });\n\t\t\treturn orientation;\n\t\t})\n\t), []);\n\n\tuseEffect(() => {\n\t\tif (get) {\n\t\t\tgetOrientation();\n\t\t}\n\n\t\tif (listen) {\n\t\t\tconst subscription = ScreenOrientation.addOrientationChangeListener(\n\t\t\t\tevent => setOrientation(event.orientationInfo),\n\t\t\t);\n\n\t\t\treturn subscription.remove;\n\t\t}\n\t}, [get, listen, getOrientation]);\n\n\treturn [orientation, getOrientation];\n}\n\nexport interface ScreenOrientationOptions {\n\t/** If it should fetch the screen orientation when mounted, defaults to `true` */\n\tget?: boolean;\n\t/** If it should listen to screen orientation changes, defaults to `true` */\n\tlisten?: boolean;\n}\n"]}