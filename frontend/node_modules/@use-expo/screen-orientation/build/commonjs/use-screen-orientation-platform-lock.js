"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScreenOrientationPlatformLock = useScreenOrientationPlatformLock;

var _react = require("react");

var ScreenOrientation = _interopRequireWildcard(require("expo-screen-orientation"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Get or lock the screen orientation on multiple platforms.
 * This hook will always fetch the current platform lock.
 * It will also apply the platform lock when this is provided.
 *
 * @see https://docs.expo.io/versions/latest/sdk/screen-orientation/
 * @example const [lockInfo, lockError] = useScreenOrientationPlatformLock(...);
 */
function useScreenOrientationPlatformLock(platformInfo) {
  const [platformLock, setPlatformLock] = (0, _react.useState)();
  const [platformLockError, setPlatformLockError] = (0, _react.useState)();
  (0, _react.useEffect)(() => {
    ScreenOrientation.getPlatformOrientationLockAsync().then(setPlatformLock);

    if (platformInfo) {
      ScreenOrientation.lockPlatformAsync(platformInfo).then(() => setPlatformLock(platformInfo)).catch(setPlatformLockError);
      return () => {
        ScreenOrientation.unlockAsync();
      };
    }
  }, [platformInfo]);
  return [platformLock, platformLockError];
}
//# sourceMappingURL=use-screen-orientation-platform-lock.js.map